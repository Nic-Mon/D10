#!/usr/bin/env python3# Exercise: Presidents# Author GitHub usernames:# #1:# #2:# Instructions:# Write a program to:# (1) Load the data from presidents.txt into a dictionary.# (2) Print the years the greatest and least number of presidents were alive.#     (between 1732 and 2016 (inclusive))#     Ex.#       'least = 2015'#       'John Doe'#       'most = 2015'#       'John Doe, Jane Doe, John Adams, and Jane Adams'# Bonus: Confirm there are no ties. If there is a tie print like so:#     Ex.#       'least = 1900, 2013-2015'#       'John Doe (1900)'#       'Jane Doe (2013-2015)'#       'most = 1900-1934, 2013'#       'John Doe, Jane Doe, John Adams, and Jane Adams (1900-1933)'#       'Sally Doe, Billy Doe, Mary Doe, and Cary Doe (1934)'#       'Alice Doe, Bob Doe, Zane Doe, and Yi Do (2013)'# (3) Write your print statements to a file (greatest_least.txt) as well.# Upload that file as well.############################################################################### Importsdef pres_dict():	pres_dict = {}	with open('presidents.txt', 'r') as fin:		lines = fin.read().splitlines()		for line in lines:			line = line.split(',')			try:				pres_dict[line[0]] = (int(line[1]), int(line[2]))			except:				pres_dict[line[0]] = (int(line[1]), None)	return pres_dictdef pres_alive(year, pres_dict):	pres_alive = []	for pres, dates in pres_dict.items():		if year >= dates[0] and (dates[1] == None or year <= dates[1]):			pres_alive.append(pres)	return pres_alivedef years_dict():	years_dict = {}	for year in range(1732,2017):		years_dict[year] = pres_alive(year, pres_dict())	return years_dict# Body##############################################################################def main():  # CALL YOUR FUNCTION BELOW	years = years_dict()	years_scores = []	for year, pres in years.items():		years_scores.append((year, len(pres)))	sorted_years = sorted(years_scores, key = lambda x: x[-1])		least_alive = sorted_years[0][1]	most_alive = sorted_years[-1][1]	years_least = [year for year, score in years_scores if score == least_alive]	years_most = [year for year, score in years_scores if score == most_alive]	print('least ({} pres alive) = '.format(least_alive) + str(years_least))	for year in years_least:		print(str(year) + ": " + str(years[year]))	print('most ({} pres alive) = '.format(most_alive) + str(years_most))	for year in years_most:		print(str(year) + ": " + str(years[year]))	with open('greatest_least.txt', 'w') as fout:		fout.write('least ({} pres alive) = '.format(least_alive) + str(years_least) + '\n')		for year in years_least:			fout.write('\t' + str(year) + ": " + str(years[year]) + '\n')		fout.write('\nmost ({} pres alive) = '.format(most_alive) + str(years_most) + '\n')		for year in years_most:			fout.write('\t' + str(year) + ": " + str(years[year]) + '\n')if __name__ == '__main__':    main()